name: Plan and preview site on PR, Apply and promote to prod on merge to main

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"


jobs:
  tf-and-app:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      actions: read        # Required to identify workflow run.
      checks: write        # Required to add status summary.
      contents: read       # Required to checkout repository.
      pull-requests: write # Required to add PR comment.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup TF
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Init TF
        id: tf-and-app
        if: ${{ github.event_name == 'pull_request' }}
        uses: op5dev/tf-via-pr@v13
        with:
          working-directory: infra
          command: init
          arg-lock: false
          arg-backend-config: "backends/prod.tfbackend"
          format: true
          validate: true

      - name: Setup TFLint
        if: ${{ github.event_name == 'pull_request' }}
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_wrapper: true

      - name: Run TFLint
        id: tflint
        if: ${{ github.event_name == 'pull_request' }}
        working-directory: infra
        run: |
          tflint --init
          tflint --format compact
        continue-on-error: true

      - name: Comment if TFLint errors
        if: ${{ github.event_name == 'pull_request' && steps.tflint.outputs.exitcode != 0 }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Compose TFLint output.
          tflint='${{ steps.tflint.outputs.stderr || steps.tflint.outputs.stdout }}'
          tflint="<details><summary>TFLint error.</summary>

          \`\`\`hcl
          $(echo "$tflint" | sed 's/`/\\`/g')
          \`\`\`
          </details>"

          # Get body of PR comment from tf step output.
          comment=$(gh api /repos/{owner}/{repo}/issues/comments/${{ steps.tf.outputs.comment-id }} --method GET --jq '.body')

          # Replace placeholder with TFLint output.
          comment="${comment//<!-- placeholder-2 -->/$tflint}"

          # Update PR comment combined with TFLint output.
          gh api /repos/{owner}/{repo}/issues/comments/${{ steps.tf.outputs.comment-id }} --method PATCH --field body="$comment"

          # Exit workflow due to TFLint error.
          exit 1

      - name: Provision TF
        uses: op5dev/tf-via-pr@v13
        with:
          working-directory: infra
          command: ${{ github.event_name == 'push' && 'apply' || 'plan' }}
          arg-lock: ${{ github.event_name == 'push' }}
          arg-backend-config: "backends/prod.tfbackend"

      - name: Get Static Web App API Key
        id: get_api_key
        # This step will now always run.
        # It attempts to get the Terraform output, and if it fails (e.g., output doesn't exist yet),
        # it sets API_KEY to an empty string.
        run: |
          API_KEY=""
          # Initialize Terraform backend before attempting to get output
          terraform init -backend-config="backends/prod.tfbackend" -no-color 2>/dev/null || true

          # Attempt to get the Terraform output. Redirect stderr to /dev/null to suppress errors.
          # Check the exit code ($?) to see if the command was successful.
          TEMP_API_KEY=$(terraform output -raw static_web_app_api_key 2>/dev/null)
          if [ $? -eq 0 ]; then
            API_KEY="$TEMP_API_KEY"
          else
            echo "Terraform output 'static_web_app_api_key' not found or command failed. Setting API_KEY to empty string."
          fi

          echo "::add-mask::$API_KEY"
          echo "STATIC_WEB_APP_API_KEY=$API_KEY" >> $GITHUB_ENV # Store as env var for subsequent steps
          echo "masked key: $API_KEY"
        working-directory: "infra" # Adjust to your Terraform infra path
        continue-on-error: true # Allow this step to continue even if terraform output fails

      - name: Build And Deploy Static Web App
        # Only run if the original condition is met AND STATIC_WEB_APP_API_KEY is not empty.
        if: (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')) && env.STATIC_WEB_APP_API_KEY != ''
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          # Use the API key from Terraform output for BOTH push and pull_request events.
          azure_static_web_apps_api_token: ${{ env.STATIC_WEB_APP_API_KEY }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"

          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "static" # App source code path
          api_location: "" # Api source code path - optional
          output_location: "" # Built app content directory - optional
          # Only skip deployment if the token is missing/invalid AND it's a pull request.
          # This handles the edge case of the very first PR before the SWA is provisioned.
          # This will now only be relevant if the step *does* run, and the key somehow becomes invalid.
          skip_deploy_on_missing_secrets: ${{ github.event_name == 'pull_request' }}


      - name: Close Pull Request
        # Only run if the original condition is met AND STATIC_WEB_APP_API_KEY is not empty.
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && env.STATIC_WEB_APP_API_KEY != ''
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          # Use the API key from Terraform output for cleanup on PR close.
          azure_static_web_apps_api_token: ${{ env.STATIC_WEB_APP_API_KEY }}
          action: "close"
          # Always skip cleanup if the token is missing/invalid (e.g., SWA not provisioned yet)
          # This will now only be relevant if the step *does* run, and the key somehow becomes invalid.
          skip_deploy_on_missing_secrets: true
